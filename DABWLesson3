create table FRUIT_OPTIONS (
    FRUIT_ID number,
    FRUIT_NAME varchar(25) -- supported types: https://docs.snowflake.com/en/sql-reference/intro-summary-data-types
) -- comment = '<comment>';

create file format smoothies.public.two_headerrow_pct_delim 
type = 'CSV'
skip_header = 2
field_delimiter = '%'
trim_space = TRUE;SMOOTHIES.PUBLIC.ORDERS


CREATE FILE FORMAT smoothies.public.two_headerrow_pct_delim 
  TYPE = CSV
  SKIP_HEADER = 2
  FIELD_DELIMITER = '%'
  TRIM_SPACE = TRUE;


SELECT $1, $2, $3, $4, $5
FROM @<stage_name>/<file_name>
(FILE_FORMAT => <file_format_name>);

SELECT $1, $2, $3, $4, $5
FROM @SMOOTHIES.PUBLIC.MY_UPLOADED_FILES
(FILE_FORMAT => smoothies.public.two_headerrow_pct_delim);



COPY INTO smoothies.public.fruit_options
from @smoothies.public.my_uploaded_files
files = ('fruits_available_for_smoothies.txt')
file_format = (format_name = smoothies.public.two_headerrow_pct_delim)
on_error = abort_statement
validation_mode = return_errors
purge = true;


COPY INTO smoothies.public.fruit_options
from @smoothies.public.my_uploaded_files
files = ('fruits_available_for_smoothies.txt')
file_format = (format_name = smoothies.public.two_headerrow_pct_delim)
on_error = abort_statement
validation_mode = return_errors
purge = true;

--above gave error Numeric value 'Apples' is not recognized, because of column order mismatch ..

COPY INTO smoothies.public.fruit_options
from (
select $2 as FRUIT_ID, $1 as FRUIT_NAME from
@smoothies.public.my_uploaded_files/fruits_available_for_smoothies.txt)
file_format = (format_name = smoothies.public.two_headerrow_pct_delim)
on_error = abort_statement
purge = true;

create table SMOOTHIES.PUBLIC.ORDERS(
ingredients varchar(200)
);


insert into smoothies.public.orders(ingredients) values (' Figs');

select * from smoothies.public.orders;


use role accountadmin;
use database UTIL_DB; 
use schema public;

select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
SELECT 'DABW002' as step
 ,(select IFF(count(*)>=5,5,0)
    from (select ingredients from smoothies.public.orders
    group by ingredients)
 ) as actual
 ,  5 as expected
 ,'At least 5 different orders entered' as description
);


select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
  SELECT 'DABW003' as step
 ,(select ascii(fruit_name) from smoothies.public.fruit_options
where fruit_name ilike 'z%') as actual
 , 90 as expected
 ,'A mystery check for the inquisitive' as description
);

alter table SMOOTHIES.PUBLIC.ORDERS add column name_on_order varchar(200) ;

insert into smoothies.public.orders(ingredients) values (' Figs','test1');

insert into smoothies.public.orders(ingredients,name_on_order) values (' Figs','test1');

alter table SMOOTHIES.PUBLIC.ORDERS add column ORDER_FILLED BOOLEAN DEFAULT FALSE ;

select * from SMOOTHIES.PUBLIC.ORDERS;

update smoothies.public.orders
       set order_filled = true
       where name_on_order is null;


select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
  SELECT 'DABW004' as step
 ,( select count(*) from smoothies.information_schema.columns
    where table_schema = 'PUBLIC' 
    and table_name = 'ORDERS'
    and column_name = 'ORDER_FILLED'
    and column_default = 'FALSE'
    and data_type = 'BOOLEAN') as actual
 , 1 as expected
 ,'Order Filled is Boolean' as description
);

--error Cannot add column 'ORDER_UID' with non-constant default to non-empty table 'ORDERS'.

truncate table SMOOTHIES.PUBLIC.ORDERS;

--after truncate 

alter table SMOOTHIES.PUBLIC.ORDERS 
add column order_uid integer --adds the column
default smoothies.public.order_seq.nextval  --sets the value of the column to sequence
constraint order_uid unique enforced; --makes sure there is always a unique value in the column


create or replace table smoothies.public.orders (
       order_uid integer default smoothies.public.order_seq.nextval,
       order_filled boolean default false,
       name_on_order varchar(100),
       ingredients varchar(200),
       constraint order_uid unique (order_uid),
       order_ts timestamp_ltz default current_timestamp()
);

select * from smoothies.public.orders;

use role accountadmin;
use database UTIL_DB; 
use schema public;

-- Set your worksheet drop lists
-- DO NOT EDIT ANYTHING BELOW THIS LINE
select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
 SELECT 'DABW005' as step
 ,(select IFF(count(*)>=2, 2, 0) as num_sis_apps
    from (
        select count(*) as tally
        from snowflake.account_usage.query_history
        where query_text like 'execute streamlit%'
        group by query_text)
 ) as actual
 , 2 as expected
 ,'There seem to be 2 SiS Apps' as description
);

set mystery_bag="What is in there?"; --double quotes evaluating it as identifier

set mystery_bag='What is in there?';

select $mystery_bag;

set mystery_bag='This bag is empty';

set var1=2 ;

set var2=5;

set var3=7;

select $var1+$var2+$var3;


create function sum_mystery_bag_vars(var1 number, var2 number, var3 number)
returns number as 'select var1+var2+var3';

select sum_mystery_bag_vars(12,36,204);

set eeny=4 ;

set meeny=67.2;

set miney_mo=-39;

select sum_mystery_bag_vars($eeny,$meeny,$miney_mo);

use role accountadmin;
use database UTIL_DB; 
use schema public;

-- Set your worksheet drop lists

-- Set these local variables according to the instructions
set this = -10.5;
set that =2 ;
set the_other = 1000 ;

-- DO NOT EDIT ANYTHING BELOW THIS LINE
select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
  SELECT 'DABW006' as step
 ,( select util_db.public.sum_mystery_bag_vars($this,$that,$the_other)) as actual
 , 991.5 as expected
 ,'Mystery Bag Function Output' as description
);

create function NEUTRALIZE_WHINING ( phrase text)
returns text as 'select initcap(phrase)';

select NEUTRALIZE_WHINING ('the problem');

select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
 SELECT 'DABW007' as step
 ,( select hash(neutralize_whining('bUt mOm i wAsHeD tHe dIsHes yEsTeRdAy'))) as actual
 , -4759027801154767056 as expected
 ,'WHINGE UDF Works' as description
);

alter table fruit_options add column SEARCH_ON varchar(25);

select * from fruit_options;

update fruit_options
set search_on='Apple'
where fruit_name='Apples';

select * from fruit_options where fruit_name like '%ack%';

update fruit_options
set search_on='Jack Fruit'
where fruit_name='Jackfruit';

select hash(ingredients) as hash_ing
       from smoothies.public.orders
       where order_ts is not null 
       and name_on_order is not null 
       and (name_on_order = 'Kevin' and order_filled = FALSE and hash_ing = 7976616299844859825) 
       or (name_on_order ='Divya' and order_filled = TRUE and hash_ing = -6112358379204300652)
       or (name_on_order ='Xi' and order_filled = TRUE and hash_ing = 1016924841131818535);
       
/* wrong query becasue the hash_ing column is used at the same level as it is definied */
select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
   SELECT 'DABW008' as step 
   ,( select sum(hash_ing) from
      (select hash(ingredients) as hash_ing
       from smoothies.public.orders
       where order_ts is not null 
       and name_on_order is not null 
       and (name_on_order = 'Kevin' and order_filled = FALSE and hash_ing = 7976616299844859825) 
       or (name_on_order ='Divya' and order_filled = TRUE and hash_ing = -6112358379204300652)
       or (name_on_order ='Xi' and order_filled = TRUE and hash_ing = 1016924841131818535))
     ) as actual 
   , 2881182761772377708 as expected 
   ,'Followed challenge lab directions' as description
); 

/* corrected query becasue the hash_ing column is used at the same level as it is definied , dora check passed */
select GRADER(step, (actual = expected), actual, expected, description) as graded_results from (
   SELECT 'DABW008' as step 
   ,( select sum(hash_ing) from
      (select hash(ingredients) as hash_ing
       from smoothies.public.orders
       where order_ts is not null 
       and name_on_order is not null 
       and (name_on_order = 'Kevin' and order_filled = FALSE ) 
       or (name_on_order ='Divya' and order_filled = TRUE )
       or (name_on_order ='Xi' and order_filled = TRUE ))
     ) as actual 
   , 2881182761772377708 as expected 
   ,'Followed challenge lab directions' as description
); 

select * from smoothies.public.orders;

truncate table smoothies.public.orders;

select hash(ingredients) as hash_ing
       from smoothies.public.orders ;
       
select hash(ingredients||'') as hash_ing
       from smoothies.public.orders ;

select hash(ingredients) as hash_ing
       from smoothies.public.orders
       where order_ts is not null 
       and name_on_order is not null 
       and (name_on_order = 'Kevin' and order_filled = FALSE and hash_ing = 7976616299844859825);

       --7976616299844859825  matches
select hash('Apples Lime Ximenia ') as hash_ing;

select hash(' Apples Lime Ximenia ') as hash_ing;

 select hash('Apples, Lime and Ximenia');


UPDATE smoothies.public.orders
SET hash_ing = HASH( ingredients );

ALTER TABLE smoothies.public.orders
ADD COLUMN hash_ing NUMBER(19,0);

select sum(hash_ing) from(
select hash(ingredients) as hash_ing
       from smoothies.public.orders
       where order_ts is not null 
       and name_on_order is not null
        and (name_on_order = 'Kevin' and order_filled = FALSE)
         or (name_on_order ='Divya' and order_filled = TRUE) 
          or (name_on_order ='Xi' and order_filled = TRUE)
          )
         ;

select sum(hash_ing) from
      (select hash(ingredients) as hash_ing
       from smoothies.public.orders
       where order_ts is not null 
       and name_on_order is not null 
       and (name_on_order = 'Kevin' and order_filled = FALSE and hash_ing = 7976616299844859825) 
       or (name_on_order ='Divya' and order_filled = TRUE and hash_ing = -6112358379204300652)
       or (name_on_order ='Xi' and order_filled = TRUE and hash_ing = 1016924841131818535))



